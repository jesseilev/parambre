{"version":3,"sources":["audioContext.js","utils/index.js","synth.js","actions/index.js","containers/AdjustableBoxFor4Params.js","containers/Visualizer.js","reducers/timbreParams.js","containers/ControlPad.js","containers/ParambreContainer.js","components/App.js","reducers/audioPlayer.js","reducers/frequencyData.js","reducers/index.js","index.js"],"names":["audioContext","AudioContext","window","webkitAudioContext","alert","context","state","document","body","addEventListener","resume","sine","curve","x","offset","amp","period","phase","Math","sin","PI","range","min","max","rangeDistance","mapBetweenRanges","fromRange","toRange","value","percent","oscWithFluctuatingGain","createNode","_ref","gainValue","gain","pulseFrequency","pulseAmplitiude","pan","panPulseFrequency","panPulseMagnitude","rest","Object","objectWithoutProperties","10","stereoPanner","11","key","destination","12","oscillator","frequency","type","0","1","objectSpread","2","3","customSynth","_ref2","rootFrequency","toneCount","overtoneAmp","overtoneModulationFreq","overtoneModulationAmp","R","filter","i","reduce","accumulatedOscs","freq","updateGraph","newNodes","_state$settings$synth","settings","synth","attack","release","currentTime","audioPlayer","audioGraph","targetGain","isPlaying","rampDuration","targetFinishTime","mostRecentPlayPauseChange","stillRamping","curveType","_state$timbreParams","timbreParams","overtoneAmplitudesCurve","modulationMagnitudesCurve","modulationFrequenciesCurve","genCustom","4","buildAudioNodes","update","boxAdjustment","params","resizeHandleStyles","width","height","background","AdjustableBoxFor4ParamsWithSize","withSize","monitorHeight","props","xParam","yParam","widthParam","heightParam","parentSize","zIndex","paramSetName","boxBeingAdjusted","onDrag","onResize","onBoxAdjustmentStart","onBoxAdjustmentStop","centerX","centerY","react_default","a","createElement","react_rnd_lib","position","y","size","bounds","maxWidth","maxHeight","minWidth","minHeight","style","border","color","opacity","display","alignItems","justifyContent","boxShadow","onDragStart","onDragStop","onResizeStart","onResizeStop","enableResizing","topLeft","topRight","bottomLeft","bottomRight","connect","ownProps","cpsba","currentParamSetBeingAdjusted","dispatch","containerSize","mouseEvent","dragData","compressedDeltaX","deltaX","compressedDeltaY","deltaY","event","directionType","refToElement","delta","widthParamNewValue","clientWidth","heightParamNewValue","clientHeight","boxAdjustmentStart","boxAdjustmentStop","Visualizer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","canvas","React","createRef","ref","_this$props","overtones","colors","current","getContext","sliceWidth","length","xPaddingUnits","maxRadius","clearRect","map","overtone","index","overtoneAmplitude","modulationMagnitude","modulationFrequency","lineWidth","strokeStyle","modulationMagnitudes","beginPath","lineHeight","moveTo","lineTo","stroke","fillStyle","overtoneAmplitudes","arc","fill","modulationFrequencies","radius","draw","Component","computeOvertones","ranges","genRandomCurve","mapFrom01To","r","n","randomInRange","random","initialState","arguments","undefined","action","updaterFuncs","lensPath","newState","loop","Cmd","boxArea","computeZIndex","listOfParamsBoxes","paramsBox","indexOf","ControlPadWithSize","overtoneAmplitudesBox","modulationMagnitudesBox","modulationFrequenciesBox","paramsList","borderColor","borderStyle","borderWidth","isAdjustmentHappening","containers_AdjustableBoxFor4Params","makeParams","curveSettings","curveKeyName","ParambreContainerWithSize","containers_Visualizer","left","top","containers_ControlPad","App","containers_ParambreContainer","createVirtualAudioGraph","output","setIsPlaying","newIsPlaying","Uint8Array","frequencyData","TP","AP","FD","enhancer","compose","applyMiddleware","ReduxEmitter","Loop","store","createStore","run","updateGaph","combineReducers","comboReducer","render","react_redux_es","components_App","getElementById","subscribe","getState"],"mappings":"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","file":"static/js/main.674fb215.chunk.js","sourcesContent":["\nexport default (function() {\n  const tryAudioContext = () => {\n    if (window == 'undefined') {\n      return false;\n    }\n    return window.AudioContext // Default\n      || window.webkitAudioContext // Safari and old versions of Chrome\n      || false; \n  }\n\n  const AudioContext = tryAudioContext();\n\n  if (! AudioContext) {\n    // crap out early\n    alert(\"Sorry, but the Web Audio API is not supported by your browser.\" \n      + \"Please, consider upgrading to the latest version or downloading \"\n      + \"Google Chrome or Mozilla Firefox.\"\n    );\n    return false;\n  }\n\n  const context = new AudioContext();\n\n  // unlock if iOS\n  const isLockedOnIosDevice = context.state === 'suspended' && 'ontouchstart' in window;\n  if(isLockedOnIosDevice) {\n    alert('I know the device is iOS and audiocontext is locked');\n    const unlock = () => {\n      context.resume();\n      alert('I have attempted to unlock the audiocontext');\n    }\n    document.body.addEventListener('touchstart', unlock, false);\n  }\n\n  return context;\n})();","export const sine = (curve, x) => {\n  // debugger;\n  const { offset, amp, period, phase } = curve;\n  return offset + amp * Math.sin( (2 * Math.PI * x / period) + phase );\n};\n\nexport const range = (min, max) => ({ min: min, max: max });\n\nexport const rangeDistance = (range) => (range.max - range.min);\n\nexport const mapBetweenRanges = (fromRange, toRange, value) => {\n  const percent = (value - fromRange.min) / rangeDistance(fromRange);\n  return toRange.min + (percent * rangeDistance(toRange));\n};\n\nexport const clampToRange = (range, value) => (\n  Math.max(range.min, Math.min(range.max, value))\n);","import * as R from 'ramda';\nimport createVirtualAudioGraph, {\n  createNode,\n  createWorkletNode,\n  delay,\n  gain,\n  biquadFilter,\n  bufferSource,\n  oscillator,\n  stereoPanner,\n  analyser,\n  dynamicsCompressor\n} from 'virtual-audio-graph';\nimport audioContext from './audioContext';\nimport {sine} from './utils';\n\n\n\n\n\n\n// CUSTOM GRAPH SECTIONS\n\n\nconst oscWithFluctuatingGain = createNode(({\n  gain: gainValue,\n  pulseFrequency,\n  pulseAmplitiude, \n  pan,\n  panPulseFrequency,\n  panPulseMagnitude,\n  ...rest\n}) => {\n  return {\n    10: stereoPanner('output', { pan: pan }),\n    \n    11: gain({ key: 10, destination: 'pan'}, { gain: panPulseMagnitude }),\n    12: oscillator(11, { frequency: panPulseFrequency, type: 'square' }),\n\n    0: gain(10, {gain: gainValue}),\n    1: oscillator(0, { ...rest }),\n    2: gain({ key: 0, destination: 'gain'}, { gain: pulseAmplitiude }),\n    3: oscillator(2, { frequency: pulseFrequency, type: 'sine' })\n  }\n})\n\nconst customSynth = createNode(({\n  rootFrequency,\n  toneCount,\n  overtoneAmp,\n  overtoneModulationFreq,\n  overtoneModulationAmp,\n  ...rest\n}) => {\n  const reduceFunc = (accumulatedOscs, i) => {\n    const freq = rootFrequency * i;\n    const amp = overtoneAmp(i) / (i * toneCount);\n    accumulatedOscs[i] = oscWithFluctuatingGain('output', { \n      frequency: freq, \n      gain: amp,\n      pulseFrequency: overtoneModulationFreq(i),\n      pulseAmplitiude: overtoneModulationAmp(i) * amp,\n\n      // for pan stuff, cheat and reuse each of the above functions with i shifted over\n      pan: overtoneAmp(i + 10) * 2 - 1,\n      panPulseFrequency: overtoneModulationFreq(i + 10),\n      panPulseMagnitude: overtoneModulationAmp(i + 10),\n      ...rest\n    });\n    return accumulatedOscs;\n  }\n  const withinAudibleSpectrum = (i) => i * rootFrequency < 22050;\n  return R.range(1, toneCount + 1)\n    .filter(withinAudibleSpectrum)\n    .reduce(reduceFunc, {});\n});\n\n\n// noise buffer\n// const sampleRate = audioContext.sampleRate;\n// const bufferDuration = 2;\n// const bufferSize = bufferDuration * sampleRate;\n// const buffer = audioContext.createBuffer(bufferDuration, bufferSize, sampleRate);\n// let data = buffer.getChannelData(0);\n// for (let i = 0; i < bufferSize; i++) {\n//   data[i] = Math.random() * 2 - 1;\n// }\n\n// BUILD THE AUDIO GRAPH BASED ON CURRENT STATE\n\nexport const buildAudioNodes = (state) => {\n\n  const { attack, release, toneCount, rootFrequency } = state.settings.synth;\n  const { currentTime } = state.audioPlayer.audioGraph || 0;\n  const targetGain = state.audioPlayer.isPlaying ? 1 : 0;\n  const rampDuration = state.audioPlayer.isPlaying ? attack : release;\n  let targetFinishTime = state.audioPlayer.mostRecentPlayPauseChange + rampDuration;\n  const stillRamping = currentTime < targetFinishTime;\n  const curveType = stillRamping ? 'linearRampToValueAtTime' : 'setValueAtTime';\n  targetFinishTime = stillRamping ? targetFinishTime : currentTime;\n  \n  const {\n    overtoneAmplitudesCurve, \n    modulationMagnitudesCurve, \n    modulationFrequenciesCurve\n  } = state.timbreParams;\n\n  const genCustom = freq => customSynth(0, {\n    rootFrequency: freq,\n    toneCount: state.settings.synth.toneCount,\n    overtoneAmp: (i) => sine(overtoneAmplitudesCurve, i),\n    overtoneModulationAmp: (i) => sine(modulationMagnitudesCurve, i),\n    overtoneModulationFreq: (i) => 1 + sine(modulationFrequenciesCurve, i) * 16,\n  })\n  return {\n\n\n    0: gain('output', {\n        gain: [ curveType, targetGain, targetFinishTime ]\n    }),\n\n    1: genCustom(rootFrequency * 1),   \n    // 2: genCustom(rootFrequency * 16 / 3),\n    3: genCustom(rootFrequency * 12 / 5),\n    4: genCustom(rootFrequency * 9 / 5),\n    // 5: genCustom(rootFrequency * 7 / 4)\n  };\n};\n\nconst updateGraph = (state) => { \n  const newNodes = buildAudioNodes(state);\n  state.audioPlayer.audioGraph.update(newNodes); \n};\n\nexport default updateGraph;","\n\nexport const boxAdjustment = (params) => ({\n  type: 'BOX_ADJUSTMENT',\n  params\n});\n\nexport const boxAdjustmentStart = (paramSetName) => ({\n  type: 'BOX_ADJUSTMENT_START',\n  paramSetName\n});\n\nexport const boxAdjustmentStop = (paramSetName) => ({\n  type: 'BOX_ADJUSTMENT_STOP',\n  paramSetName\n});\n\nexport const setPlayback = (newIsPlaying) => ({\n  type: 'SET_PLAYBACK',\n  newIsPlaying\n});\n\nexport const graphUpdate = () => ({\n  type: 'GRAPH_UPDATE'\n});\n\nexport const fftUpdate = (frequencyData) => ({\n  type: 'FFT_UPDATE',\n  frequencyData\n});\n\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {Rnd} from 'react-rnd';\nimport ResizableRect from 'react-resizable-rotatable-draggable';\nimport {withSize} from 'react-sizeme';\nimport * as R from 'ramda';\n\nimport {boxAdjustment, boxAdjustmentStart, boxAdjustmentStop} from '../actions';\nimport {range, mapBetweenRanges, clampToRange, rangeDistance} from '../utils';\n\n\nconst resizeHandleStyles = { \n  width: 20, \n  height: 20,\n  background: '#ddd',\n};\n\nconst AdjustableBoxFor4Params = (props) => {\n  const { \n    xParam, yParam, widthParam, heightParam, parentSize, zIndex,\n    paramSetName, boxBeingAdjusted,\n    onDrag, onResize, onBoxAdjustmentStart, onBoxAdjustmentStop\n  } = props;\n\n  const centerX = mapBetweenRanges(\n    xParam.range, \n    range(0, parentSize.width), \n    xParam.value\n  );\n  const centerY = mapBetweenRanges(\n    yParam.range, \n    range(0, parentSize.height), \n    yParam.value\n  );\n  const width = mapBetweenRanges(\n    widthParam.range, \n    range(0, parentSize.width), \n    widthParam.value\n  );\n  const height = mapBetweenRanges(\n    heightParam.range,\n    range(0, parentSize.height),\n    heightParam.value\n  );\n\n  return (\n    <Rnd\n    position={{\n      x: centerX - width * 0.5,\n      y: centerY - height * 0.5\n    }}\n    size={{\n      width: width,\n      height: height\n    }}\n\n    bounds={'parent'}\n\n    maxWidth={ parentSize.width * 0.5 }\n    maxHeight={ parentSize.height }\n    minWidth={60}\n    minHeight={60}\n\n    style={{\n      border: '5px solid #ddd',\n      background: boxBeingAdjusted === 'ME' ? 'rgba(0,0,0,0)' : props.color,\n      opacity: boxBeingAdjusted === 'SOMEONE_ELSE' ? 0 : 1,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      boxShadow: '10px 10px 20px 2px rgba(0,0,0,0.2)',\n      zIndex: zIndex,\n    }}\n    \n    onDrag={onDrag(parentSize, xParam, yParam)}\n    onResize={onResize(parentSize, widthParam, heightParam)}\n\n    onDragStart={onBoxAdjustmentStart(paramSetName)}\n    onDragStop={onBoxAdjustmentStop(paramSetName)}\n    onResizeStart={onBoxAdjustmentStart(paramSetName)}\n    onResizeStop={onBoxAdjustmentStop(paramSetName)}\n    \n    enableResizing={{\n      topLeft: true,\n      topRight: true,\n      bottomLeft: true,\n      bottomRight: true\n    }}\n\n    resizeHandleStyles={{\n      topLeft: resizeHandleStyles,\n      topRight: resizeHandleStyles,\n      bottomLeft: resizeHandleStyles,\n      bottomRight: resizeHandleStyles,\n    }}\n    >\n    </Rnd>\n  );\n};\n\nAdjustableBoxFor4Params.propTypes = {\n  xParam: PropTypes.object.isRequired,\n  yParam: PropTypes.object.isRequired,\n  widthParam: PropTypes.object.isRequired,\n  heightParam: PropTypes.object.isRequired,\n  parentSize: PropTypes.object.isRequired,\n  onDrag: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n};\n\n\nconst mapStateToProps = (state, ownProps) => {\n  const cpsba = state.timbreParams.currentParamSetBeingAdjusted;\n  let boxBeingAdjusted = null;\n  if (cpsba === ownProps.paramSetName) {\n    boxBeingAdjusted = 'ME';\n  } \n  else if (cpsba !== null) {\n    boxBeingAdjusted = 'SOMEONE_ELSE';\n  }\n\n  return {\n    boxBeingAdjusted: boxBeingAdjusted\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDrag: (containerSize, xParam, yParam) => (\n    (mouseEvent, dragData) => {\n      const compressedDeltaX = mapBetweenRanges(\n        range(0, containerSize.width), \n        range(0, rangeDistance(xParam.range)), \n        dragData.deltaX\n      );\n      const compressedDeltaY = mapBetweenRanges(\n        range(0, containerSize.height), \n        range(0, rangeDistance(yParam.range)), \n        dragData.deltaY\n      );\n\n      return dispatch(boxAdjustment([\n        { ...xParam, value: xParam.value + compressedDeltaX },\n        { ...yParam, value: yParam.value + compressedDeltaY }\n      ]));\n    }\n  ),\n  onResize: (containerSize, widthParam, heightParam) => (\n    (event, directionType, refToElement, delta, position) => {\n      const widthParamNewValue = mapBetweenRanges(\n        range(0, containerSize.width),\n        widthParam.range,\n        refToElement.clientWidth\n      );\n      const heightParamNewValue = mapBetweenRanges(\n        range(0, containerSize.height),\n        heightParam.range,\n        refToElement.clientHeight\n      );\n\n      return dispatch(boxAdjustment([\n        { ...widthParam, value: widthParamNewValue },\n        { ...heightParam, value: heightParamNewValue }\n      ]));\n    }\n  ),\n  onBoxAdjustmentStart: (paramSetName) => {\n    return () => dispatch(boxAdjustmentStart(paramSetName));\n  },\n  onBoxAdjustmentStop: (paramSetName) => {\n    return () => dispatch(boxAdjustmentStop(paramSetName));\n  }\n});\n\nconst AdjustableBoxFor4ParamsWithSize = withSize({ monitorHeight: true })(AdjustableBoxFor4Params);\nexport default connect(mapStateToProps, mapDispatchToProps)(AdjustableBoxFor4ParamsWithSize);","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport * as R from 'ramda';\nimport { sine } from '../utils';\n\n\n\nclass Visualizer extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  render() {\n\n    return (\n      <canvas \n      width={this.props.parentSize.width} \n      height={this.props.parentSize.height}\n      ref={this.canvas} \n      />\n    );\n  }\n\n  draw() {\n    const { overtones, isPlaying, colors } = this.props;\n    const canvas = this.canvas.current;\n    const context = canvas.getContext('2d');\n\n    const xPaddingUnits = 2;\n    const sliceWidth = canvas.width / (overtones.length + (xPaddingUnits * 2));\n    const maxHeight = canvas.height * 0.5;\n    const maxRadius = canvas.width * 0.05;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    if (! isPlaying) {\n      return;\n    }\n    \n    overtones.map(( overtone, index ) => {\n      const { overtoneAmplitude, modulationMagnitude, modulationFrequency } = overtone;\n      const x = (index + xPaddingUnits + 0.5) * sliceWidth;\n      const y = overtoneAmplitude * maxHeight + (maxHeight * 0.5);\n\n      // draw the modulation magnitude line\n      context.lineWidth = 4;\n      context.strokeStyle = colors.modulationMagnitudes;\n      context.beginPath();\n      // line height based on modulation magnitude\n      const lineHeight = modulationMagnitude * maxHeight;\n      context.moveTo(x, y - lineHeight * 0.5);\n      context.lineTo(x, y + lineHeight * 0.5);\n      context.stroke();\n\n      // draw the overtone overtoneAmplitude \n      context.lineWidth = 4;\n      context.fillStyle = colors.overtoneAmplitudes;\n      context.beginPath();\n      context.arc(x, y, 8, 2 * Math.PI, false);\n      context.fill();\n      \n      // draw the modulation frequency circle\n      context.strokeStyle = colors.modulationFrequencies;\n      context.lineWidth = 4;\n      context.beginPath();\n      // bigger radius for slower modulation frequency\n      const radius = Math.max((1 - modulationFrequency) * maxRadius, 0);\n      context.arc(x, y, radius, 2 * Math.PI, false);\n      context.stroke();\n      \n\n    });\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n}\n\nconst computeOvertones = (state) => (\n  R.range(1, state.settings.synth.toneCount + 1).map( i => ({\n    overtoneAmplitude: sine(state.timbreParams.overtoneAmplitudesCurve, i),\n    modulationMagnitude: sine(state.timbreParams.modulationMagnitudesCurve, i),\n    modulationFrequency: sine(state.timbreParams.modulationFrequenciesCurve, i)\n  }))\n);\n\nconst mapStateToProps = (state) => ({\n  overtones: computeOvertones(state),\n  isPlaying: state.audioPlayer.isPlaying,\n  colors: state.settings.colors\n});\n\nexport default connect(mapStateToProps)(Visualizer);","import * as R from 'ramda';\nimport {Cmd, loop} from 'redux-loop';\n// import updateGraph from '../synth.js';\nimport {graphUpdate} from '../actions';\nimport {range, mapBetweenRanges} from '../utils';\n\n\n\nexport const settings = {\n  overtoneAmplitudesCurve: {\n    ranges: {\n      phase: range(0, 18),\n      offset: range(0, 1),\n      period: range(2, 20),\n      amp: range(0, 1)\n    }\n  },\n  modulationMagnitudesCurve: {\n    ranges: {\n      phase: range(0, 18),\n      offset: range(0, 1),\n      period: range(2, 20),\n      amp: range(0, 1)\n    }\n  },\n  modulationFrequenciesCurve: {\n    ranges: {\n      phase: range(0, 18),\n      offset: range(0, 1),\n      period: range(2, 20),\n      amp: range(0, 1)\n    }\n  }\n};\n\nconst genRandomCurve = (ranges) => {\n  const mapFrom01To = (r, n) => mapBetweenRanges(range(0, 1), r, n);\n  const randomInRange = (min, max) => (\n    mapFrom01To(range(min, max), Math.random())\n  );\n  return {\n    phase: mapFrom01To(ranges.phase, randomInRange(0.25, 0.75)),\n    offset: mapFrom01To(ranges.offset, randomInRange(0.4, 0.6)),\n    period: mapFrom01To(ranges.period, randomInRange(0.1, 0.4)),\n    amp: mapFrom01To(ranges.amp, randomInRange(0.3, 0.8))\n  };\n};\n\nexport const initialState = {\n  overtoneAmplitudesCurve: genRandomCurve(settings.overtoneAmplitudesCurve.ranges),\n  modulationMagnitudesCurve: genRandomCurve(settings.modulationMagnitudesCurve.ranges),\n  modulationFrequenciesCurve: genRandomCurve(settings.modulationFrequenciesCurve.ranges),\n  currentParamSetBeingAdjusted: null\n};\n\n\nexport const timbreParams = (state = initialState, action) => {\n  // debugger;\n  switch(action.type) {\n    case 'BOX_ADJUSTMENT':\n\n      // overwrites the old value at lensPath with new value\n      const updateParam = ({value, lensPath}) => (\n        R.curry(R.set(R.lensPath(lensPath), value))\n      );\n\n      // a list of update functions, one for each param\n      const updaterFuncs = R.map(updateParam, action.params);\n\n      // pipe the state through each of the update functions\n      const newState = R.reduce(R.applyTo, state, updaterFuncs);\n\n      // return new state and a command to dispatch the GRAPH_UPDATE action\n      return loop(\n        newState,\n        Cmd.action(graphUpdate())\n      );\n\n    case 'BOX_ADJUSTMENT_START':\n      return {\n        ...state,\n        currentParamSetBeingAdjusted: action.paramSetName\n      }\n\n    case 'BOX_ADJUSTMENT_STOP':\n      return {\n        ...state,\n        currentParamSetBeingAdjusted: null\n      }\n\n    default:\n      return state;\n  }\n};\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {withSize} from 'react-sizeme';\nimport * as R from 'ramda';\n\n\nimport AdjustableBoxFor4Params from './AdjustableBoxFor4Params';\nimport Visualizer from '../containers/Visualizer';\nimport {range, mapBetweenRanges} from '../utils';\n\n// TODO inject settings into state instead of doing thing\nimport {settings} from '../reducers/timbreParams';\n\n\n\nconst boxArea = ({width, height}) => {\n  const w = mapBetweenRanges(width.range, range(0,1), width.value);\n  const h = mapBetweenRanges(height.range, range(0,1), height.value);\n  return w * h;\n};\n\nconst computeZIndex = (listOfParamsBoxes, paramsBox) => (\n  R.reverse(R.sortBy(boxArea, listOfParamsBoxes)).indexOf(paramsBox)\n);\n\nconst ControlPad = (props) => {\n  const { \n    overtoneAmplitudesBox, modulationMagnitudesBox, modulationFrequenciesBox \n  } = props;\n  const paramsList = [\n    overtoneAmplitudesBox, modulationMagnitudesBox, modulationFrequenciesBox\n  ];\n\n  return (\n    <div\n    style={{\n      width: '100%',\n      height: '100%',\n      borderColor: 'white',\n      borderStyle: 'dashed',\n      borderWidth: props.isAdjustmentHappening ? '0px' : '0px'\n      // background: 'rgba(255, 255, 255, 0.05)'\n    }}\n    >\n    \n        <AdjustableBoxFor4Params \n        parentSize={props.size}\n        xParam={props.overtoneAmplitudesBox.x}\n        yParam={props.overtoneAmplitudesBox.y}\n        widthParam={props.overtoneAmplitudesBox.width}\n        heightParam={props.overtoneAmplitudesBox.height}\n        zIndex={computeZIndex(paramsList, overtoneAmplitudesBox)}\n        color={props.colors.overtoneAmplitudes}\n        paramSetName={'overtoneAmplitudes'}\n        >\n        </AdjustableBoxFor4Params>\n\n        <AdjustableBoxFor4Params \n        parentSize={props.size}\n        xParam={props.modulationMagnitudesBox.x}\n        yParam={props.modulationMagnitudesBox.y}\n        widthParam={props.modulationMagnitudesBox.width}\n        heightParam={props.modulationMagnitudesBox.height}\n        color={props.colors.modulationMagnitudes}\n        paramSetName={'modulationMagnitudes'}\n        zIndex={computeZIndex(paramsList, modulationMagnitudesBox)}\n        >\n        </AdjustableBoxFor4Params>\n\n        <AdjustableBoxFor4Params \n        parentSize={props.size}\n        xParam={props.modulationFrequenciesBox.x}\n        yParam={props.modulationFrequenciesBox.y}\n        widthParam={props.modulationFrequenciesBox.width}\n        heightParam={props.modulationFrequenciesBox.height}\n        color={props.colors.modulationFrequencies}\n        paramSetName={'modulationFrequencies'}\n        zIndex={computeZIndex(paramsList, modulationFrequenciesBox)}\n        >\n        </AdjustableBoxFor4Params>\n    </div>\n  );\n}\n\n\n\n\nconst mapStateToProps = (state) => {\n\n  const makeParams = (curve, curveSettings, curveKeyName) => ({\n    x: { \n      value: curve.phase,\n      range: curveSettings.ranges.phase,\n      lensPath: [ curveKeyName, 'phase' ]\n    },\n    y: {\n      value: curve.offset,\n      range: curveSettings.ranges.offset,\n      lensPath: [ curveKeyName, 'offset' ]\n    },\n    width: {\n      value: curve.period,\n      range: curveSettings.ranges.period,\n      lensPath: [ curveKeyName, 'period' ]\n    },\n    height: {\n      value: curve.amp,\n      range: curveSettings.ranges.amp,\n      lensPath: [ curveKeyName, 'amp' ]\n    }\n  });\n\n  return {\n    overtoneAmplitudesBox: makeParams(\n      state.timbreParams.overtoneAmplitudesCurve, \n      settings.overtoneAmplitudesCurve, \n      'overtoneAmplitudesCurve'\n    ),\n    modulationMagnitudesBox: makeParams(\n      state.timbreParams.modulationMagnitudesCurve, \n      settings.modulationMagnitudesCurve, \n      'modulationMagnitudesCurve'\n    ),\n    modulationFrequenciesBox: makeParams(\n      state.timbreParams.modulationFrequenciesCurve, \n      settings.modulationFrequenciesCurve, \n      'modulationFrequenciesCurve'\n    ),\n    colors: state.settings.colors,\n    isAdjustmentHappening: state.timbreParams.currentParamSetBeingAdjusted !== null\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => (\n    {}\n);\n\nconst ControlPadWithSize = withSize({ monitorHeight: true })(ControlPad);\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlPadWithSize);","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {withSize} from 'react-sizeme';\n\nimport ControlPad from './ControlPad';\nimport Visualizer from './Visualizer';\n\n\nconst ParambreContainer = (props) => (\n  <div\n  style={{ \n    width: '100%',\n    height: '100vh',\n    background: '#111'\n  }}\n  >\n    \n    <Visualizer parentSize={props.size} />\n\n    <div\n    style={{\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      zIndex: 10\n    }}\n    >\n      <ControlPad />\n    </div>\n\n  </div>\n);\n\nconst ParambreContainerWithSize = withSize({ monitorHeight: true })(ParambreContainer);\nexport default connect()(ParambreContainerWithSize);","import React from 'react';\nimport {withSize} from 'react-sizeme';\nimport ParambreContainer from '../containers/ParambreContainer';\n\nconst App = () => (\n  <div>\n    <ParambreContainer />\n  </div>\n);\n\nexport default App;\n","import createVirtualAudioGraph, {\n  createNode,\n  createWorkletNode,\n  delay,\n  gain,\n  oscillator,\n  stereoPanner,\n} from 'virtual-audio-graph';\nimport { Cmd, loop } from 'redux-loop'; \nimport audioContext from '../audioContext';\nimport * as Actions from '../actions';\n\n\nconst audioGraph = createVirtualAudioGraph({\n  audioContext,\n  output: audioContext.destination\n});\n\n// HACK\n// to make sure the first initial trigger fades in from volume 0.\n// Better would be dispatching a GRAPH_UPDATE Cmd when the app loads,\n// but doing so was causing audioGraph.currentTime to malfunction.\naudioGraph.update({\n  0: gain('output', { gain: 0 })\n});\n\nexport const initialState = {\n  isPlaying: false,\n  mostRecentPlayPauseChange: 0,\n  audioGraph: audioGraph\n}\n\nexport const audioPlayer = (state = initialState, action) => {\n  const setIsPlaying = (newIsPlaying) => {\n    const newState = {\n      ...state,\n      isPlaying: newIsPlaying,\n      mostRecentPlayPauseChange: state.audioGraph.currentTime\n    };\n    return loop(\n      newState, \n      Cmd.action(Actions.graphUpdate())\n    );\n  };\n\n  switch(action.type) {\n    case 'TOGGLE_PLAYBACK':\n      return setIsPlaying(!state.isPlaying);\n    case 'BOX_ADJUSTMENT_START':\n      return setIsPlaying(true);\n    case 'BOX_ADJUSTMENT_STOP':\n      return setIsPlaying(false);\n    default:\n      return state;\n  }\n};\n","\nexport const initialState = new Uint8Array();\n\nexport const frequencyData = (state = initialState, action) => {\n  switch (action.type) {\n    case 'FFT_UPDATE':\n      return action.frequencyData;\n    default:\n      return state;\n  }\n};\n","\nimport { combineReducers, Cmd, loop } from 'redux-loop';\nimport * as AP from './audioPlayer';\nimport * as TP from './timbreParams';\nimport * as FD from './frequencyData';\nimport updateGaph from '../synth';\n\n\nexport const initialState = {\n  timbreParams: TP.initialState,\n  audioPlayer: AP.initialState,\n  frequencyData: FD.initialState,\n  settings: {\n    ...(TP.settings),\n    colors: {\n      overtoneAmplitudes: '#f50',\n      modulationMagnitudes: '#309',\n      modulationFrequencies: '#737'\n    },\n    synth: {\n      attack: 0.5,\n      release: 3,\n      toneCount: 12,\n      rootFrequency: 150,\n    }\n  }\n};\n\nexport const rootReducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'GRAPH_UPDATE':\n      return loop(state, Cmd.run(() => updateGaph(state)));\n\n    default:\n      const comboReducer = combineReducers({\n        timbreParams: TP.timbreParams,\n        audioPlayer: AP.audioPlayer,\n        frequencyData: FD.frequencyData\n      });\n      const newStateAndCmd = comboReducer(state, action);\n      return newStateAndCmd\n  }\n};\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport { ReduxEmitter } from 'kuker-emitters';\nimport * as Loop from 'redux-loop';\nimport * as R from 'ramda';\n\n\nimport createVirtualAudioGraph, {\n  createNode,\n  createWorkletNode,\n  delay,\n  gain,\n  oscillator,\n  stereoPanner,\n} from 'virtual-audio-graph';\n\nimport audioContext from './audioContext';\nimport updateGraph from './synth';\nimport App from './components/App';\nimport {rootReducer, initialState} from './reducers';\n\n\nconst enhancer = compose(\n  applyMiddleware(ReduxEmitter()),\n  Loop.install(),\n  // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n)\n\nconst store = createStore(rootReducer, initialState, enhancer);\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n\n\n\n\n\n\n\n\nstore.subscribe(() => {\n  const state = store.getState();\n  // console.log(state.audioPlayer.isPlaying);\n});\n\n\n\n\n// function updateFFT(timestamp) {\n//   requestAnimationFrame(updateFFT);\n\n//   // console.log(timestamp);\n//   // extract fft data\n//   const state = store.getState();\n//   const analyzerNode = state.audioPlayer.audioGraph.getAudioNodeById(1000);\n//   if (analyzerNode !== undefined) {\n//     let dataArray = new Uint8Array(analyzerNode.frequencyBinCount);\n//     analyzerNode.getByteFrequencyData(dataArray);\n\n//     // dispatch to the store  \n//     store.dispatch(fftUpdate(dataArray))\n//   }\n// };\n\n// updateFFT();"],"sourceRoot":""}